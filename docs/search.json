[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "MyBlog",
    "section": "",
    "text": "MArketing Data Analysis\n\n\n\n\n\n\n\nmarketing\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nFeb 14, 2023\n\n\nRamdhan Hidayat\n\n\n\n\n\n\n  \n\n\n\n\nPost With Code\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nFeb 14, 2023\n\n\nHarlow Malloc\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nFeb 11, 2023\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/marketing_analytics/index.html",
    "href": "posts/marketing_analytics/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "The Chief Marketing Officer that recent marketing campaigns have not been as effective as they were expected to be. You need to analyze the data set to understand this problem and propose data-driven solutions.\nbelow are the questions that need to be answered:\n1. Data Summaries and Distributions:\n\nWhat are your main findings looking at the univariate and bivariate summaries and distributions?\nDo you notice any patterns or anomalies in the data? Can you plot them?\n\n\nCharacteristics Customers:\n\n\nAre there any useful variables that you can engineer with the given data?\nWhat does the average customer look like for this company?\n\n3. Product Performance:\n\nWhich products are performing best?\nWhich products are performing worst?\n\n4. Factors that Influence Purchases:\n\nWhat factors are significantly related to the number of store purchases?\nDoes US fare significantly better than the Rest of the World in terms of total purchases?\nYour supervisor insists that people who buy gold are more conservative. Therefore, people who spent an above average amount on gold in the last 2 years would have more in store purchases. Justify or refute this statement using an appropriate statistical test.\n\n5. Campaign Performance:\n\nIs there a significant relationship between geographical regional and success of a campaign?\nWhich marketing campaign is most successful?\nWhich products are performing best?\nWhich channels are underperforming?\n\n\nLet’s start from diagnosing the dataset.\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ tibble  3.1.8     ✔ purrr   1.0.1\n✔ tidyr   1.3.0     ✔ stringr 1.5.0\n✔ readr   2.1.3     ✔ forcats 0.5.2\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nAttaching package: 'gridExtra'\n\n\nThe following object is masked from 'package:dplyr':\n\n    combine\n\n\nWarning: The `size` argument of `element_rect()` is deprecated as of ggplot2 3.4.0.\nℹ Please use the `linewidth` argument instead.\n\n\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib.ticker as plticker\nfrom matplotlib import cm\nimport plotly.graph_objs as go\nimport plotly\nfrom plotly.subplots import make_subplots\nfrom IPython.display import display, HTML\nimport warnings\n#warnings.filterwarnings(\"ignore\")\n\n#load data\nmarketing_df = pd.read_csv('marketing_data.csv')\nmarketing_df.columns = marketing_df.columns.str.replace(' ', '')\n\n\n#drop missing values\nmarketing_df_cln = marketing_df.copy().dropna(axis=0)\n\n#change data type\nmarketing_df_cln['Dt_Customer'] = pd.to_datetime(marketing_df['Dt_Customer'])\nmarketing_df_cln['Year_Birth'] = marketing_df_cln['Year_Birth'].astype('int')\nmarketing_df_cln['Kidhome'] = marketing_df_cln['Kidhome'].astype('int')\nmarketing_df_cln['Teenhome'] = marketing_df_cln['Teenhome'].astype('int')\nmarketing_df_cln['NumDealsPurchases'] = marketing_df_cln['NumDealsPurchases'].astype('int')\nmarketing_df_cln['NumWebPurchases'] = marketing_df_cln['NumWebPurchases'].astype('int')\nmarketing_df_cln['NumCatalogPurchases'] = marketing_df_cln['NumCatalogPurchases'].astype('int')\nmarketing_df_cln['NumStorePurchases'] = marketing_df_cln['NumStorePurchases'].astype('int')\nmarketing_df_cln['NumWebVisitsMonth'] = marketing_df_cln['NumWebVisitsMonth'].astype('int')\n\n#convert string in Income to float\nmarketing_df_cln['Income'] = marketing_df_cln['Income'].str.replace('$', '')\n\n<string>:1: FutureWarning: The default value of regex will change from True to False in a future version. In addition, single character regular expressions will *not* be treated as literal strings when regex=True.\n\nmarketing_df_cln['Income'] = marketing_df_cln['Income'].str.replace(',', '')\nmarketing_df_cln['Income'] = marketing_df_cln['Income'].astype('float')\n\n#change data type to bool\nbools = ['AcceptedCmp1', 'AcceptedCmp2', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'Complain', 'Response']\nfor col in bools:\n  marketing_df_cln[col] = marketing_df_cln[col].astype('bool')\n\n#change data type to category\nmarketing_df_cln['Education'] = marketing_df_cln['Education'].astype('category')\nmarketing_df_cln['Marital_Status'] = marketing_df_cln['Marital_Status'].astype('category')\nmarketing_df_cln['Country'] = marketing_df_cln['Country'].astype('category')\n\n#new features\n\n#age\nmarketing_df_cln['Age'] = 2021 - marketing_df_cln['Year_Birth']\n\n#total purchases\nmarketing_df_cln['Total_Purchases'] = marketing_df_cln['NumDealsPurchases'] + marketing_df_cln['NumWebPurchases'] + marketing_df_cln['NumCatalogPurchases'] + marketing_df_cln['NumStorePurchases']\n\n#total amount spent\nmarketing_df_cln['Total_Amount_Spent'] = marketing_df_cln['MntWines'] + marketing_df_cln['MntFruits'] + marketing_df_cln['MntMeatProducts'] + marketing_df_cln['MntFishProducts'] + marketing_df_cln['MntSweetProducts'] + marketing_df_cln['MntGoldProds']\n\n#total amount spent per purchase\nmarketing_df_cln['Total_Amount_Spent_Per_Purchase'] = marketing_df_cln['Total_Amount_Spent'] / marketing_df_cln['Total_Purchases']\n\n#total amount spent per visit\nmarketing_df_cln['Total_Amount_Spent_Per_Visit'] = marketing_df_cln['Total_Amount_Spent'] / marketing_df_cln['NumWebVisitsMonth']\n\n#total amount spent per year\nmarketing_df_cln['Total_Amount_Spent_Per_Year'] = marketing_df_cln['Total_Amount_Spent'] / (2021 - marketing_df_cln['Year_Birth'])\n\n#total amount spent per month\nmarketing_df_cln['Total_Amount_Spent_Per_Month'] = marketing_df_cln['Total_Amount_Spent'] / (marketing_df_cln['Dt_Customer'].dt.month + (marketing_df_cln['Dt_Customer'].dt.year - 2021) * 12)\n\n#total amount spent per day\nmarketing_df_cln['Total_Amount_Spent_Per_Day'] = marketing_df_cln['Total_Amount_Spent'] / (marketing_df_cln['Dt_Customer'].dt.day + (marketing_df_cln['Dt_Customer'].dt.month + (marketing_df_cln['Dt_Customer'].dt.year - 2021) * 12) * 30)\n\n#total children living in the household\nmarketing_df_cln['Total_Children'] = marketing_df_cln['Kidhome'] + marketing_df_cln['Teenhome']\n\n#total amount spent per child\nmarketing_df_cln['Total_Amount_Spent_Per_Child'] = marketing_df_cln['Total_Amount_Spent'] / marketing_df_cln['Total_Children']\n\n#parenthood status\nmarketing_df_cln['Parenthood_Status'] = marketing_df_cln['Total_Children'].replace({0: \"Childless\", 1: \"Single Parent\", 2: \"Dual Parent\"})\n\n#education segmentation\nmarketing_df_cln[\"Education\"] = marketing_df_cln[\"Education\"]\\\n                      .replace({\"Basic\":\"Undergraduate\", \"2n Cycle\":\"Undergraduate\", \"Graduation\":\"Graduate\", \n                                \"Master\":\"Postgraduate\", \"PhD\":\"Postgraduate\"})\n\n#generation segmentation\nconditions = [\n    marketing_df_cln['Year_Birth'].lt(1922),\n    marketing_df_cln['Year_Birth'].ge(1922) & marketing_df_cln['Year_Birth'].le(1927),\n    marketing_df_cln['Year_Birth'].ge(1928) & marketing_df_cln['Year_Birth'].le(1945),\n    marketing_df_cln['Year_Birth'].ge(1946) & marketing_df_cln['Year_Birth'].le(1964),\n    # marketing_df_cln['Year_Birth'].ge(1955) & marketing_df_cln['Year_Birth'].le(1964),\n    marketing_df_cln['Year_Birth'].ge(1965) & marketing_df_cln['Year_Birth'].le(1980),\n    marketing_df_cln['Year_Birth'].ge(1981) & marketing_df_cln['Year_Birth'].le(1996),\n    marketing_df_cln['Year_Birth'].ge(1997) & marketing_df_cln['Year_Birth'].le(2012),\n    marketing_df_cln['Year_Birth'].ge(2010) & marketing_df_cln['Year_Birth'].le(2025)\n]\n\ngenerations = ['Pre-WWII', 'WWII', 'Post-War', 'Boomers', 'Gen-X', 'Millenials', 'Gen-Z', 'Gen-Alpha']\nmarketing_df_cln['generation'] = np.select(conditions, generations)\n\n#categorize income level into 6 segments based on quartiles\nmarketing_df_cln['Income_Level'] = pd.qcut(marketing_df_cln['Income'], 6, labels=['Lowest', 'Lower', 'Low', 'High', 'Higher', 'Highest'])\n\n#total amount spent per income level, save to a new dataframe\ntotal_amount_spent_per_income_level = marketing_df_cln.groupby('Income_Level')['Total_Amount_Spent'].sum().reset_index()\n\n\nplt.figure(figsize=(10,6))\nsns.heatmap(marketing_df.isna().transpose(),\n            cmap=\"YlGnBu\",\n            cbar_kws={'label': 'Missing Data'})\nplt.title('Missing Values', fontsize=12)\nplt.xlabel('Row Index', fontsize = 10) \nplt.ylabel('Columns', fontsize = 10)\nplt.show()"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  }
]